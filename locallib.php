<?php
// This file is part of Moodle - http://moodle.org/
//
// Moodle is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Moodle is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.

/**
 * Helper functions for CUL Activity Stream
 *
 * @package    block
 * @subpackage culactivity_stream
 * @copyright  2013 Amanda Doughty <amanda.doughty.1@city.ac.uk>
 * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 *
 */

require_once($CFG->dirroot.'/course/lib.php');


/**
 * Function to retrieve notifications
 *
 * @global stdClass $DB
 * @global stdClass $USER
 * @global stdClass $COURSE
 * @param int $limitfrom the limit offset (for pagination and infinite scroll)
 * @param int $limitnum the number of records to retrieve
 * @param int $lastid notification id used to reload the block contents
 * @return array (int $count, array $notifications)
 */
function block_culactivity_stream_get_notifications($courseid=SITEID, $lastid=0, $limitfrom=0, $limitnum=5, $newer=true) {
    global $DB, $USER;
    $count = 0;

    if ($newer) {
        $where = 'deleted = 0 and userid = :userid and id > :lastid';
        $params = array('userid' => $USER->id, 'lastid' => $lastid);
    } else if ($lastid > 0) {
        $where = 'deleted = 0 and userid = :userid and id < :lastid';
        $params = array('userid' => $USER->id, 'lastid' => $lastid);
    } else {
        $where = 'deleted = 0 and userid = :userid';
        $params = array('userid' => $USER->id);
    }

    $activitystream = array();

    // Check if we on the MyMoodle page or in a course.
    // We fetch all notifications on the MyMoodle page but only course specific
    // ones in a course.
    if ($courseid != SITEID) {
        $where .= ' and courseid = :courseid';
        $params['courseid'] = $courseid;
    }

    if (!$notifications = $DB->get_records_select(
            'message_culactivity_stream',
            $where,
            $params,
            'timecreated DESC, id DESC', '*',
            $limitfrom,
            $limitnum)) {

        return array( 0, $activitystream);
    }

    $count = $DB->count_records_select('message_culactivity_stream', $where, $params);

    foreach ($notifications as $notification) {
        // Guests have no lastcourseaccess data, so we set this to 2 days ago
        // so that notifications younger than two days can be set as new.
        $lastcourseaccess = round(time() - COURSE_MAX_RECENT_PERIOD, -2); // Better db caching for guests - 100 seconds.

        if (!isguestuser() && !empty($notification->courseid)) {
            if (!empty($USER->lastcourseaccess[$notification->courseid])) {
                $lastcourseaccess = $USER->lastcourseaccess[$notification->courseid];
            }
        }

        // If we have the course id then get the course image or a default
        // gravatar.
        if (isset($notification->courseid) && $notification->courseid != 0 && $notification->courseid != SITEID) {
            $notification->img = block_culactivity_stream_get_course_img($notification->courseid);
        } else { // Else get the user image.
            $notification->img = block_culactivity_stream_get_user_img($notification->userfromid);
        }

        // Use the course icon for notifications generated by our local plugin.
        if ($notification->component == 'local_culactivity_stream') {
            $notification->icon = 'i/course';
            $notification->component = 'core';
            $notification->title = get_string('course');
        } else if ($notification->component == 'moodle'
                || $notification->component == 'core') { // TODO need a default image.
            $notification->icon = 'i/user';
            $notification->title = get_string('user');
        } else {
            $notification->icon = 'icon';
            $notification->title = substr($notification->component, 0, 4) == 'mod_' ?
                                    get_string('modulename', $notification->component) : '';
        }

        $timesince = block_culactivity_stream_human_timing($notification->timecreated);
        $notification->time = $timesince;
        $notification->new = $notification->timecreated > $lastcourseaccess ? true : false;
        $notification->contexturlname = get_string('visit', 'block_culactivity_stream');

        $activitystream[] = $notification;
    }

    return array($count, $activitystream);
}

/**
 * Function that compares a time stamp to the current time and returns a human
 * readable string saying how long ago the time stamp was
 *
 * @param int $time unix time stamp
 * @return string representing time since message created
 */
function block_culactivity_stream_human_timing ($time) {

    $time = time() - $time; // To get the time since that moment.

    $tokens = array (
        31536000 => get_string('year'),
        2592000 => get_string('month'),
        604800 => get_string('week'),
        86400 => get_string('day'),
        3600 => get_string('hour'),
        60 => get_string('minute'),
        1 => get_string('second', 'block_culactivity_stream')
    );

    foreach ($tokens as $unit => $text) {

        if ($time < $unit) {
            continue;
        }

        $numberofunits = floor($time / $unit);
        return $numberofunits.' '.$text.(($numberofunits > 1) ? 's' : '');
    }
}

/**
 * block_culactivity_stream_get_course_displayname()
 * @global type $DB
 * @param  type $courseid
 * @return string
 */
function block_culactivity_stream_get_course_displayname ($courseid) {
    global $DB;

    if (!$courseid) {
        return '';
    }

    $course = $DB->get_record('course', array('id' => $courseid));

    $coursedisplayname = preg_match('/\A\s*\z/', trim($course->idnumber)) ?
        $course->shortname : $course->idnumber;

    return $coursedisplayname;
}

/**
 * block_culactivity_stream_get_course_img()
 * @global type $CFG
 * @global type $DB
 * @global type $PAGE
 * @global type $OUTPUT
 * @param  type $courseid
 * @return string Image tag, wrapped in a hyperlink.
 */
function block_culactivity_stream_get_course_img ($courseid) {
    global $CFG, $DB, $PAGE, $OUTPUT;

    $courseid  = is_numeric($courseid) ? $courseid : null;
    $coursedisplayname = block_culactivity_stream_get_course_displayname ($courseid, array());

    if ($course = $DB->get_record('course', array('id' => $courseid))) {
        $courseimgrenderer = $PAGE->get_renderer('block_culactivity_stream', 'renderers_course_picture');
        $coursepic = new course_picture($course);
        $coursepic->link = true;
        $coursepic->class = 'coursepicture';
        $courseimg = $courseimgrenderer->render($coursepic);
    } else {
        $url = $OUTPUT->pix_url('u/f2');
        $attributes = array(
            'src' => $url,
            'alt' => get_string('pictureof', '', $coursedisplayname),
            'class' => 'courseimage'
        );
        $img = html_writer::empty_tag('img', $attributes);
        $attributes = array('href' => $CFG->wwwroot);
        $courseimg = html_writer::tag('a', $img, $attributes);
    }

    return $courseimg;
}

/**
 * block_culactivity_stream_get_user_img()
 * @global type $DB
 * @global type $OUTPUT
 * @param  type $userid
 * @return string Image tag, possibly wrapped in a hyperlink.
 */
function block_culactivity_stream_get_user_img ($userid) {
    global $CFG, $DB, $OUTPUT;

    $userid  = is_numeric($userid) ? $userid : null;

    if ($user = $DB->get_record('user', array('id' => $userid))) {
        $userpic = new user_picture($user);
        $userpic->link = true;
        $userpic->class = 'personpicture';
        $userimg = $OUTPUT->render($userpic);
    } else {
        $url = $OUTPUT->pix_url('u/f2');
        $attributes = array(
            'src' => $url,
            'alt' => get_string('anon', 'block_culactivity_stream'),
            'class' => 'personpicture'
        );
        $img = html_writer::empty_tag('img', $attributes);
        $attributes = array('href' => $CFG->wwwroot);
        $userimg = html_writer::tag('a', $img, $attributes);
    }

    return $userimg;
}

/**
 * Function to carry out a soft delete of a notification by marking it as
 * deleted in the message_culactivity_stream table
 *
 * @global stdClass $DB
 * @param int $remove the notification id
 * @return bool true
 */
function block_culactivity_stream_remove_notification ($remove) {
    global $DB;
    $notification = new stdClass();
    $notification->id = $remove;
    $notification->deleted = 1;
    $notification->timedeleted = time();

    // Soft delete.
    return $DB->update_record('message_culactivity_stream', $notification);
}